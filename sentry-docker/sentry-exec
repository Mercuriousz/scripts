#!/bin/bash
# This script is used if sentry was deployed using docker-sentry.sh script

# Author sebi@nologin.ro

usage() {
  echo "Usage : sentry-exec start|stop|restart|status"
}

start() {
  # Start redis
  echo -e "Starting Redis container..."
  docker run -d --restart=always \
    --name redis \
    --sysctl=net.core.somaxconn=65535 \
    -v $(etcdctl get /sentry/REDIS_DIR):/data \
    redis; sleep 15

  # Start postgresql
  echo -e "Starting PostgreSQL container..."
  docker run -d --restart=always --name postgres \
    -e POSTGRES_PASSWORD=$(etcdctl get /sentry/POSTGRES_PASSWORD) \
    -e POSTGRES_USER=$(etcdctl get /sentry/POSTGRES_USER) \
    -e PGDATA=$(etcdctl get /sentry/PGDATA) \
    -v $(etcdctl get /sentry/PG_DIR):/var/lib/postgresql/data/pgdata \
    postgres; sleep 15

  # Start sentry
  echo -e "Starting sentry containers..."
  docker run -d --restart=always -p 9000:9000 \
    --name sentry \
    -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
    -e SENTRY_SINGLE_ORGANIZATION=$(etcdctl get /sentry/SENTRY_SINGLE_ORGANIZATION) \
    -e SENTRY_SERVER_EMAIL=$(etcdctl get /sentry/SENTRY_SERVER_EMAIL) \
    -e SENTRY_EMAIL_HOST=$(etcdctl get /sentry/SENTRY_EMAIL_HOST) \
    -e SENTRY_EMAIL_PASSWORD=$(etcdctl get /sentry/SENTRY_EMAIL_PASSWORD) \
    -e SENTRY_EMAIL_USER=$(etcdctl get /sentry/SENTRY_EMAIL_USER) \
    -e SENTRY_EMAIL_PORT=$(etcdctl get /sentry/SENTRY_EMAIL_PORT) \
    -e SENTRY_EMAIL_USE_TLS=$(etcdctl get /sentry/SENTRY_EMAIL_USE_TLS) \
    -v $(etcdctl get /sentry/SENTRY_DIR):/var/lib/sentry/files \
    --link redis:redis \
    --link postgres:postgres \
    sentry; sleep 5

  # Start sentry cron
  docker run -d --restart=always --name sentry-cron \
    -v $(etcdctl get /sentry/SENTRY_DIR):/var/lib/sentry/files \
    -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
    -e SENTRY_SINGLE_ORGANIZATION=$(etcdctl get /sentry/SENTRY_SINGLE_ORGANIZATION) \
    -e SENTRY_SERVER_EMAIL=$(etcdctl get /sentry/SENTRY_SERVER_EMAIL) \
    -e SENTRY_EMAIL_HOST=$(etcdctl get /sentry/SENTRY_EMAIL_HOST) \
    -e SENTRY_EMAIL_PASSWORD=$(etcdctl get /sentry/SENTRY_EMAIL_PASSWORD) \
    -e SENTRY_EMAIL_USER=$(etcdctl get /sentry/SENTRY_EMAIL_USER) \
    -e SENTRY_EMAIL_PORT=$(etcdctl get /sentry/SENTRY_EMAIL_PORT) \
    -e SENTRY_EMAIL_USE_TLS=$(etcdctl get /sentry/SENTRY_EMAIL_USE_TLS) \
    --link postgres:postgres \
    --link redis:redis \
    sentry run cron; sleep 5

  # Start sentry worker(s)
  docker run -d --restart=always --name sentry-worker-1 \
    -v $(etcdctl get /sentry/SENTRY_DIR):/var/lib/sentry/files \
    -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
    -e SENTRY_SINGLE_ORGANIZATION=$(etcdctl get /sentry/SENTRY_SINGLE_ORGANIZATION) \
    -e SENTRY_SERVER_EMAIL=$(etcdctl get /sentry/SENTRY_SERVER_EMAIL) \
    -e SENTRY_EMAIL_HOST=$(etcdctl get /sentry/SENTRY_EMAIL_HOST) \
    -e SENTRY_EMAIL_PASSWORD=$(etcdctl get /sentry/SENTRY_EMAIL_PASSWORD) \
    -e SENTRY_EMAIL_USER=$(etcdctl get /sentry/SENTRY_EMAIL_USER) \
    -e SENTRY_EMAIL_PORT=$(etcdctl get /sentry/SENTRY_EMAIL_PORT) \
    -e SENTRY_EMAIL_USE_TLS=$(etcdctl get /sentry/SENTRY_EMAIL_USE_TLS) \
    --link postgres:postgres \
    --link redis:redis \
    sentry run worker

  docker run -d --restart=always --name sentry-worker-2 \
    -v $(etcdctl get /sentry/SENTRY_DIR):/var/lib/sentry/files \
    -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
    -e SENTRY_SINGLE_ORGANIZATION=$(etcdctl get /sentry/SENTRY_SINGLE_ORGANIZATION) \
    -e SENTRY_SERVER_EMAIL=$(etcdctl get /sentry/SENTRY_SERVER_EMAIL) \
    -e SENTRY_EMAIL_HOST=$(etcdctl get /sentry/SENTRY_EMAIL_HOST) \
    -e SENTRY_EMAIL_PASSWORD=$(etcdctl get /sentry/SENTRY_EMAIL_PASSWORD) \
    -e SENTRY_EMAIL_USER=$(etcdctl get /sentry/SENTRY_EMAIL_USER) \
    -e SENTRY_EMAIL_PORT=$(etcdctl get /sentry/SENTRY_EMAIL_PORT) \
    -e SENTRY_EMAIL_USE_TLS=$(etcdctl get /sentry/SENTRY_EMAIL_USE_TLS) \
    --link postgres:postgres \
    --link redis:redis \
    sentry run worker
}

stop() {
  # Stop postgresql
  echo -e "Stopping postgresql..."
  docker stop -t 120 postgres; docker rm -f postgres

  # Stop sentry
  echo -e "Stopping sentry..."
  docker stop -t 15 sentry sentry-cron sentry-worker-1 sentry-worker-2; docker rm -f sentry sentry-cron sentry-worker-1 sentry-worker-2

  # Stop redis
  echo -e "Stopping Redis..."
  docker stop -t 30 redis; docker rm -f redis

}

restart() {
  stop
  start
}

status() {
  docker ps | grep -v NAMES | awk '{ print $NF }' | xargs docker stats
}

case "$1" in
  "")
  usage
  exit 0
  ;;
  "start")
  start
  ;;
  "stop")
  stop
  ;;
  "restart")
  restart
  ;;
  "status")
  status
  ;;
esac
